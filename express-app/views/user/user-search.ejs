<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="/css/style.css" />
  <link rel="stylesheet" href="/css/user/user-search.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
  <title>MedExtract</title>
</head>

<body>
  <nav class="user-navbar">
    <div class="container">
      <!-- Logo -->
      <div class="logo">
        <a href="/user-extract">
          <img src="/images/logo-nav.png" alt="MedExtract Logo" class="logo-img" />
        </a>
      </div>

      <!-- Desktop Navigation -->
      <ul class="nav" id="user-nav">
        <li><a href="/user-extract">Extract</a></li>
        <li><a href="/user-search">Search</a></li>
      </ul>

      <!-- User Dropdown -->
      <div class="user-menu" onclick="toggleDropdown(event)">
        <img src="/images/icons/user-circle.svg" alt="User Menu" class="user-icon" />
        <span class="username">
          <%= username %>
        </span>
        <div class="dropdown">
          <a href="/user-settings">
            <img src="/images/icons/gear-six.svg" alt="Settings" /> Settings
          </a>
          <a class="logout-confirm" href="#">
            <img src="/images/icons/sign-out.svg" alt="Sign Out" /> Sign Out
          </a>
        </div>
      </div>

      <!-- Burger Toggle -->
      <div class="burger" id="burger-toggle" onclick="toggleBurger()">
        <img src="/images/icons/list-white.svg" alt="Menu" class="burger-icon" />
      </div>
    </div>

    <!-- Mobile Menu -->
    <div class="mobile-menu" id="mobile-menu">
      <div class="mobile-user">
        <img src="/images/icons/user-circle.svg" alt="User Menu" class="user-icon" />
        <span class="username">
          <%= username %>
        </span>
      </div>

      <ul>
        <li><a href="/user-extract">Extract</a></li>
        <li><a href="/user-search">Search</a></li>
        <li><a href="/user-settings">Settings</a></li>
        <li><a class="logout-confirm" href="#">Sign Out</a></li>
      </ul>
    </div>
  </nav>

  <div class="logout-modal-container">
    <div class="logout-modal">
      <div class="modal-header">
        <div class="modal-title">
          <img src="images/icons/seal-question.svg" alt="question mark">
          <h3>Confirm Logout</h3>
        </div>
        <img id="logout-close-btn" class="close-btn" src="images/icons/x.svg" alt="close button">
      </div>

      <div class="modal-body">
        <p>Are you sure you want to log out?</p>
      </div>

      <div class="modal-actions">
        <button id="logout-cancel-btn" type="button" class="cancel-btn">Cancel</button>
        <button id="logout-confirm-btn" type="button" class="logout-btn">Log Out</button>
      </div>
    </div>
  </div>

  <div id="server-message" class="server-message hidden">
    <img id="server-message-icon" src="/images/icons/seal-check.svg" alt="Status Icon" class="server-message-icon" />
    <span id="server-message-text">This is a server message</span>
    <img id="server-message-close" src="/images/icons/x-circle.svg" alt="Close" class="server-message-close" />
  </div>


  <main class="search-function">
    <div class="container">
      <div class="wrapper">
        <div class="search-bar">
          <input type="text" placeholder="Search for drug..." />
          <div class="drug-list"></div>
          <div id="open" class="icon"><i class="fas fa-search"></i></div>
        </div>
      </div>
    </div>
  </main>

  <div id="modal_container" class="modal-container">
    <div class="modal">
      <div class="modal-header">
        <h1 id="modal-title"></h1>
        <img class="modal-save-icon" id="save" src="/images/icons/bookmark-simple.svg" alt="Save"
          onclick="saveData();" />
        <img src="/images/icons/x.svg" alt="Close" class="modal-close-icon" id="close">
      </div>

      <div class="loader active">
        <div class="container">
          <div class="loading">
            <div class="loading-text"></div>
          </div>
        </div>
      </div>

      <div class="tabs">
        <div class="container">
          <div class="tab-container">
            <div class="tab-box">
              <select id="tabSelector" class="tab-btn">
                <option value="0" selected>Medication Details</option>
                <option value="1">Drug Interactions</option>
                <option value="2">Dosage Guidelines</option>
                <option value="3">Side Effects</option>
                <option value="4">Drug Prices</option>
              </select>
            </div>
            <div class="content-box">
              <div class="content active" id="drug_information">
                <p>

                </p>
              </div>

              <div class="content" id="interactions">
                <p>

                </p>
              </div>

              <div class="content" id="indications">
                <p>

                </p>
              </div>

              <div class="content" id="side_effects">
                <p>

                </p>
              </div>

              <div class="content" id="price">
                <p>

                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <footer class="footer">
    <div class="container">
      <div class="f-1">
        <a href="/user-extract">
          <img src="/images/logo-footer.png" alt="MedExtract Logo" class="logo-img" />
        </a>
        <p>
          Empowering healthcare through intelligent technology. Our system combines OCR, NLP, and BioBERT NER to
          transform complex clinical narratives into structured medical insightsâ€”supporting accuracy, efficiency, and
          better patient care.
        </p>
      </div>

      <div class="f-2">
        <div>
          <h2>Links</h2>
          <ul class="nav">
            <li><a href="/user-extract">Extract</a></li>
            <li><a href="/user-search">Search</a></li>
            <li><a href="/user-settings">Settings</a></li>
            <li><a class="logout-confirm" href="#">Log Out</a></li>
            </a>
          </ul>
        </div>
      </div>

      <div class="f-3">
        <h2>Contacts</h2>
        <div class="contacts">
          <div>
            <img src="/flaticons/user/location.png" /> &nbsp;
            <p>
              University of The East Caloocan, 105 Samson Rd, Caloocan, Metro
              Manila
            </p>
          </div>
          <div>
            <img src="/flaticons/user/email.png" /> &nbsp;
            <p>nogot.markvincent@ue.edu.ph</p>
          </div>
          <div>
            <img src="/flaticons/user/call.png" /> &nbsp;
            <p>09991624156</p>
          </div>
        </div>
      </div>
    </div>
  </footer>

  <script src="../../js/user/auto-complete.js"></script>
  <script>
    const contents = document.querySelectorAll(".content");
    const tabSelector = document.getElementById("tabSelector");

    tabSelector.addEventListener("change", () => {
      const index = parseInt(tabSelector.value, 10);
      contents.forEach((content, i) => {
        content.classList.toggle("active", i === index);
      });
    });

    const searchWrapper = document.querySelector(".search-bar");
    const inputBox = searchWrapper.querySelector("input");
    const drug_list = searchWrapper.querySelector(".drug-list");

    function select(element) {
      let selectedUserData = element.textContent;
      inputBox.value = selectedUserData;
      searchWrapper.classList.remove("active");
    }

    function showDrugList(list) {
      let listData;
      if (!list.length) {
        userValue = inputBox.value;
        listData = `<li>${userValue}</li>`;
      }
      else {
        listData = list.join('');
      }

      drug_list.innerHTML = listData;
    }

    const open = document.getElementById("open");
    const modal_container = document.getElementById("modal_container");
    const close = document.getElementById("close");
    const modalTitle = document.querySelector("#modal-title");
    const saveBtn = document.querySelector("#save");

    const tabActive = document.querySelector(".tabs");
    const loaderActive = document.querySelector(".loader");

    let loading;

    const drug_information = document.querySelector("#drug_information");
    const interaction = document.querySelector("#interactions");
    const dosage = document.querySelector("#indications");
    const side_effects = document.querySelector("#side_effects");
    const price = document.querySelector("#price");

    open.addEventListener("click", () => {
      const drugNameChecker = inputBox.value.trim();

      if (!drugNameChecker) {
        showServerMessage("Please enter a medicine name.", "error");
        return;
      }

      const rawDrugName = inputBox.value;
      const drugName = rawDrugName
        .toLowerCase()
        .split(" ")
        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
        .join(" ");

      modalTitle.textContent = "Searched: " + drugName;
      modal_container.classList.add("show");

      const tabSelector = document.getElementById("tabSelector");
      tabSelector.value = "0";

      const allContents = document.querySelectorAll(".content-box .content");
      allContents.forEach((c) => c.classList.remove("active"));
      document.getElementById("drug_information").classList.add("active");

      count = 0;
      per = 0;
      loading = setInterval(animate, 100);
      disableModalClose();

      
      function setContentWithNotice(element, notice, content) {
        element.innerHTML = `
      <p class="info-source">${notice}</p>
      <p>${content}</p>
    `;
      }

      fetch("https://thesis-webpage-v13-production-55fa.up.railway.app/get-drug-info", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ drug_name: drugName }),
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error("Medicine not found.");
          }
          return response.json();
        })
        .then((data) => {
          if (data.error) {
            drug_information.textContent = "";
            interaction.textContent = "";
            dosage.textContent = "";
            side_effects.textContent = "";
            price.textContent = "";
            stopLoaderAndShowTabsError();
            return;
          }

          
          setContentWithNotice(
            drug_information,
            "The information provided is derived from Drug Bank.",
            data.drug_information || "No details available."
          );

          setContentWithNotice(
            interaction,
            "The information provided is derived from Drug Bank.",
            data.interaction || "No interactions available."
          );

          setContentWithNotice(
            dosage,
            "The information provided is derived from Drug Bank.",
            data.dosage || "No indications available."
          );

          setContentWithNotice(
            side_effects,
            "The information provided is derived from Drug Bank.",
            data.side_effects || "No side effects available."
          );

          setContentWithNotice(
            price,
            "The information provided was derived from publicly available online sources via OpenAI. Prices are suggested retail and may vary or change without notice.",
            (data.price || "No price information available.").replace(/\n/g, "<br>")
          );

          stopLoaderAndShowTabs();
        })
        .catch((error) => {
          console.error("Error:", error);
          stopLoaderAndShowTabsError();
        });
    });


    close.addEventListener("click", () => {
      modal_container.classList.remove("show");
      clearInterval(loading);
      count = 0;
      per = 0;

      loaderActive.classList.add("active");
      loadingText.innerHTML = "";
      tabActive.classList.remove("active");
      saveBtn.classList.remove("active");

      const tabBox = document.querySelector(".tab-box");
      if (tabBox) tabBox.style.display = "";

      tabSelector.value = "0";
      contents.forEach((c, i) => c.classList.remove("active"));
      document.getElementById("drug_information").classList.add("active");

      disableModalClose();
    });



    var loadingText = document.querySelector(".loading-text");
    var count = 0;
    var per = 0;

    function animate() {
      loadingText.innerHTML = "Searching drug... Please wait.";
      if ((count == 10000) & (per == 60000)) {
        loaderActive.classList.remove("active");
        tabActive.classList.add("active");
      } else {
        loadingText.classList.add("loading-text-blink");
        per = per + 6;
        count = count + 1;
      }
    }

    function stopLoaderAndShowTabs() {
      clearInterval(loading);
      loaderActive.classList.remove("active");
      loadingText.innerHTML = "";
      tabActive.classList.add("active");
      saveBtn.classList.add("active");
      enableModalClose();
    }

    function stopLoaderAndShowTabsError() {
      clearInterval(loading);
      loaderActive.classList.remove("active");
      loadingText.innerHTML = "";

      tabActive.classList.add("active");

      const drugInfo = document.getElementById("drug_information");
      drugInfo.innerHTML = `
  <div class="tabs-error-message">
    <p>Sorry, we could not find any information for the medicine you searched. This may happen if:</p>
    <ul>
      <li>The name was misspelled</li>
      <li>The input is not a medicine</li>
      <li>The medicine is not included in our dataset</li>
      <li>A brand name was used instead of the generic name</li>
    </ul>
    <p><strong>Please try searching again using the correct generic medicine name.</strong></p>
  </div>
`;

      const tabBox = document.querySelector(".tab-box");
      if (tabBox) tabBox.style.display = "none";
      saveBtn.classList.remove("active");

      enableModalClose();
    }



    function disableModalClose() {
      if (close) {
        close.style.pointerEvents = "none";
        close.style.opacity = "0.5";
      }
    }

    function enableModalClose() {
      if (close) {
        close.style.pointerEvents = "auto";
        close.style.opacity = "1";
      }
    }

    function saveData() {
      const modalTitle = document.querySelector("#modal-title");
      const medicineName = modalTitle.textContent.replace("Searched: ", "").trim();

      
      function cleanText(id, notice) {
        const el = document.getElementById(id);
        if (!el) return "";

        let text = el.textContent.trim();

      
        if (text.startsWith(notice)) {
          text = text.replace(notice, "").trim();
        }

        return text;
      }

      const details = cleanText(
        "drug_information",
        "The information provided is derived from Drug Bank."
      );
      const interactions = cleanText(
        "interactions",
        "The information provided is derived from Drug Bank."
      );
      const guidelines = cleanText(
        "indications",
        "The information provided is derived from Drug Bank."
      );
      const effects = cleanText(
        "side_effects",
        "The information provided is derived from Drug Bank."
      );
      const prices = cleanText(
        "price",
        "The information provided was derived from publicly available online sources via OpenAI. Prices are suggested retail and may vary or change without notice."
      );

      const data = {
        medicineName,
        details: details || "No details available.",
        interactions: interactions || "No interactions available.",
        guidelines: guidelines || "No indications available.",
        effects: effects || "No side effects available.",
        prices: prices || "No price information available.",
      };

      fetch("/user/save-history", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      })
        .then((response) =>
          response.json().then((json) => {
            if (!response.ok) throw new Error(json.message);
            showServerMessage(json.message, "success");
          })
        )
        .catch((error) => {
          console.error("Error:", error);
          showServerMessage(error.message, "error");
        });
    }


    function toggleDropdown(event) {
      event.stopPropagation();
      document.querySelector(".user-menu .dropdown").classList.toggle("active");
    }

    document.addEventListener("click", () => {
      document.querySelector(".user-menu .dropdown").classList.remove("active");
    });

    const logoutLinks = document.querySelectorAll(".logout-confirm");
    const logoutModal = document.querySelector(".logout-modal-container");
    const logoutCloseBtn = document.getElementById("logout-close-btn");
    const logoutCancelBtn = document.getElementById("logout-cancel-btn");
    const logoutConfirmBtn = document.getElementById("logout-confirm-btn");

    logoutLinks.forEach(link => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        logoutModal.classList.add("active");
      });
    });

    logoutCloseBtn.addEventListener("click", () => {
      logoutModal.classList.remove("active");
    });

    logoutCancelBtn.addEventListener("click", () => {
      logoutModal.classList.remove("active");
    });

    logoutConfirmBtn.addEventListener("click", () => {
      window.location.href = "/logout";
    });

    let serverMessageTimeout = null;

    function showServerMessage(message, type = "success") {
      const serverMessage = document.getElementById("server-message");
      const messageText = document.getElementById("server-message-text");
      const messageIcon = document.getElementById("server-message-icon");

      serverMessage.classList.remove("success", "error");

      messageText.textContent = message;

      if (type === "success") {
        serverMessage.classList.add("success");
        messageIcon.src = "/images/icons/seal-check-green.svg";
      } else if (type === "error") {
        serverMessage.classList.add("error");
        messageIcon.src = "/images/icons/seal-warning-red.svg";
      }

      serverMessage.classList.remove("hidden");
      serverMessage.classList.add("show");

      sessionStorage.setItem(
        "serverMessage",
        JSON.stringify({ message, type })
      );

      if (serverMessageTimeout) clearTimeout(serverMessageTimeout);

      serverMessageTimeout = setTimeout(() => {
        hideServerMessage();
      }, 3000);
    }

    function hideServerMessage() {
      const serverMessage = document.getElementById("server-message");

      if (serverMessageTimeout) clearTimeout(serverMessageTimeout);

      sessionStorage.removeItem("serverMessage");
      serverMessageTimeout = null;

      serverMessage.classList.remove("show");

      setTimeout(() => {
        serverMessage.classList.add("hidden");
      }, 400);
    }

    document
      .getElementById("server-message-close")
      .addEventListener("click", () => {
        hideServerMessage();
      });

    window.addEventListener("load", () => {
      const stored = sessionStorage.getItem("serverMessage");
      if (stored) {
        const { message, type } = JSON.parse(stored);
        if (message) showServerMessage(message, type);
      }
    });

    function toggleBurger() {
      const burger = document.getElementById("burger-toggle");
      const mobileMenu = document.getElementById("mobile-menu");
      const burgerIcon = burger.querySelector("img");

      mobileMenu.classList.toggle("open");

      if (mobileMenu.classList.contains("open")) {
        burgerIcon.src = "/images/icons/x-white.svg";
      } else {
        burgerIcon.src = "/images/icons/list-white.svg";
      }
    }


  </script>
</body>

</html>